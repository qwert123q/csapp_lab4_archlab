                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x000:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x000: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x002: 71dd01000000000000   | 	jle Done		# 如果一开始输入的len就<=0，直接结束
0x00b: 707001000000000000   | 	jmp test
                            | 
0x014:                      | Loop8x8:
                            | 	#取地址
0x014: 50870000000000000000 | 	mrmovq 0(%rdi), %r8
0x01e: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x028: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x032: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x03c: 50c72000000000000000 | 	mrmovq 32(%rdi), %r12
0x046: 50d72800000000000000 | 	mrmovq 40(%rdi), %r13
0x050: 50e73000000000000000 | 	mrmovq 48(%rdi), %r14
0x05a: 50373800000000000000 | 	mrmovq 56(%rdi), %rbx
                            | 
                            | 	#赋值
0x064: 40860000000000000000 | 	rmmovq %r8, 0(%rsi)
0x06e: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x078: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x082: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x08c: 40c62000000000000000 | 	rmmovq %r12, 32(%rsi)
0x096: 40d62800000000000000 | 	rmmovq %r13, 40(%rsi)
0x0a0: 40e63000000000000000 | 	rmmovq %r14, 48(%rsi)
0x0aa: 40363800000000000000 | 	rmmovq %rbx, 56(%rsi)
                            | 
                            | #判断是否可以count+1
0x0b4:                      | judge0:
0x0b4: 6288                 | 	andq %r8, %r8
0x0b6: 71c900000000000000   | 	jle judge1
0x0bf: c0f00100000000000000 | 	iaddq $1, %rax
0x0c9:                      | judge1:
0x0c9: 6299                 | 	andq %r9, %r9
0x0cb: 71de00000000000000   | 	jle judge2
0x0d4: c0f00100000000000000 | 	iaddq $1, %rax
0x0de:                      | judge2:
0x0de: 62aa                 | 	andq %r10, %r10
0x0e0: 71f300000000000000   | 	jle judge3
0x0e9: c0f00100000000000000 | 	iaddq $1, %rax
0x0f3:                      | judge3:
0x0f3: 62bb                 | 	andq %r11, %r11
0x0f5: 710801000000000000   | 	jle judge4
0x0fe: c0f00100000000000000 | 	iaddq $1, %rax
0x108:                      | judge4:
0x108: 62cc                 | 	andq %r12, %r12
0x10a: 711d01000000000000   | 	jle judge5
0x113: c0f00100000000000000 | 	iaddq $1, %rax
0x11d:                      | judge5:
0x11d: 62dd                 | 	andq %r13, %r13
0x11f: 713201000000000000   | 	jle judge6
0x128: c0f00100000000000000 | 	iaddq $1, %rax
0x132:                      | judge6:
0x132: 62ee                 | 	andq %r14, %r14
0x134: 714701000000000000   | 	jle judge7
0x13d: c0f00100000000000000 | 	iaddq $1, %rax
0x147:                      | judge7:
0x147: 6233                 | 	andq %rbx, %rbx
0x149: 715c01000000000000   | 	jle step8x8
0x152: c0f00100000000000000 | 	iaddq $1, %rax
                            | 
0x15c:                      | step8x8:
0x15c: c0f74000000000000000 | 	iaddq $64,%rdi
0x166: c0f64000000000000000 | 	iaddq $64,%rsi
0x170:                      | test:
                            | 	#这里需要判断长度是否有8
0x170: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx
0x17a: 761400000000000000   | 	jg Loop8x8 #长度没有8,有则8x8循环拓展。否则1x1慢慢迭代
0x183: c0f20800000000000000 | 	iaddq $8, %rdx #要把减去的8加回去才能循环
                            | 
0x18d:                      | Loop1x1:
0x18d: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src
0x197: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# and store it to dst
0x1a1: 62aa                 | 	andq %r10, %r10		# val <= 0? 这里已经是guarded-do了
0x1a3: 71b601000000000000   | 	jle Npos1x1		# if so, goto Npos:
0x1ac: c0f00100000000000000 | 	iaddq $1, %rax		# count++
0x1b6:                      | Npos1x1:	
0x1b6: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x1c0: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x1ca: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x1d4: 768d01000000000000   | 	jg Loop1x1			# if so, goto Loop:
                            | 
                            | ##################################################################
                            | 
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x1dd:                      | Done:
0x1dd: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x1de:                      | End:
                            | #/* $end ncopy-ys */
                            | 
